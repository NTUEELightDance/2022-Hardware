
UART_Rx_test_with_latch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004454  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800458c  0800458c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800458c  0800458c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800458c  0800458c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000070  08004604  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08004604  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0a1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f24  00000000  00000000  0002d13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002f060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181b9  00000000  00000000  00030860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d355  00000000  00000000  00048a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5c3  00000000  00000000  00055d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003608  00000000  00000000  000e1384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800454c 	.word	0x0800454c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800454c 	.word	0x0800454c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	0000      	movs	r0, r0
	...

08000760 <ARGB_Init>:
/**
 * @brief Init timer & prescalers
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000766:	f002 fa8b 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 800076a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <ARGB_Init+0xd8>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <ARGB_Init+0x1c>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <ARGB_Init+0x1e>
 800077c:	2302      	movs	r3, #2
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	fb02 f303 	mul.w	r3, r2, r3
 8000786:	607b      	str	r3, [r7, #4]
#endif
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	4a2b      	ldr	r2, [pc, #172]	; (800083c <ARGB_Init+0xdc>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	607b      	str	r3, [r7, #4]

    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000796:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <ARGB_Init+0xe0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <ARGB_Init+0xe0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <ARGB_Init+0xe0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2201      	movs	r2, #1
 80007b2:	615a      	str	r2, [r3, #20]

#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff37 	bl	8000628 <__aeabi_ui2d>
 80007ba:	a31b      	add	r3, pc, #108	; (adr r3, 8000828 <ARGB_Init+0xc8>)
 80007bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c0:	f7ff fcc6 	bl	8000150 <__aeabi_dmul>
 80007c4:	4602      	mov	r2, r0
 80007c6:	460b      	mov	r3, r1
 80007c8:	4610      	mov	r0, r2
 80007ca:	4619      	mov	r1, r3
 80007cc:	f7ff ffa6 	bl	800071c <__aeabi_d2uiz>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3b01      	subs	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <ARGB_Init+0xe4>)
 80007da:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff23 	bl	8000628 <__aeabi_ui2d>
 80007e2:	a313      	add	r3, pc, #76	; (adr r3, 8000830 <ARGB_Init+0xd0>)
 80007e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007e8:	f7ff fcb2 	bl	8000150 <__aeabi_dmul>
 80007ec:	4602      	mov	r2, r0
 80007ee:	460b      	mov	r3, r1
 80007f0:	4610      	mov	r0, r2
 80007f2:	4619      	mov	r1, r3
 80007f4:	f7ff ff92 	bl	800071c <__aeabi_d2uiz>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	3b01      	subs	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <ARGB_Init+0xe8>)
 8000802:	701a      	strb	r2, [r3, #0]
#endif

    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <ARGB_Init+0xec>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <ARGB_Init+0xe0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2201      	movs	r2, #1
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 ffc0 	bl	8003798 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000818:	2001      	movs	r0, #1
 800081a:	f001 f8d7 	bl	80019cc <HAL_Delay>
    return ARGB_OK;
 800081e:	2302      	movs	r3, #2
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	1eb851ec 	.word	0x1eb851ec
 800082c:	3fe1eb85 	.word	0x3fe1eb85
 8000830:	1eb851ec 	.word	0x1eb851ec
 8000834:	3fd1eb85 	.word	0x3fd1eb85
 8000838:	40021000 	.word	0x40021000
 800083c:	014f8b59 	.word	0x014f8b59
 8000840:	200001b8 	.word	0x200001b8
 8000844:	2000012c 	.word	0x2000012c
 8000848:	2000012e 	.word	0x2000012e
 800084c:	2000012d 	.word	0x2000012d

08000850 <ARGB_Fire>:
 * @brief Update strip
 * @param buf start of the LED array
 * @param num_pixels number of pixels
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Fire(u8_t* buf, u16_t num_pixels) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	807b      	strh	r3, [r7, #2]
    RGB_BUF = buf;
 800085c:	4aa2      	ldr	r2, [pc, #648]	; (8000ae8 <ARGB_Fire+0x298>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6013      	str	r3, [r2, #0]
    NUM_PIXELS = num_pixels;
 8000862:	4aa2      	ldr	r2, [pc, #648]	; (8000aec <ARGB_Fire+0x29c>)
 8000864:	887b      	ldrh	r3, [r7, #2]
 8000866:	8013      	strh	r3, [r2, #0]

    ARGB_LOC_ST = ARGB_BUSY;
 8000868:	4ba1      	ldr	r3, [pc, #644]	; (8000af0 <ARGB_Fire+0x2a0>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 800086e:	4ba1      	ldr	r3, [pc, #644]	; (8000af4 <ARGB_Fire+0x2a4>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	b29b      	uxth	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d104      	bne.n	8000882 <ARGB_Fire+0x32>
 8000878:	4b9f      	ldr	r3, [pc, #636]	; (8000af8 <ARGB_Fire+0x2a8>)
 800087a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800087e:	2b01      	cmp	r3, #1
 8000880:	d001      	beq.n	8000886 <ARGB_Fire+0x36>
        return ARGB_BUSY;
 8000882:	2300      	movs	r3, #0
 8000884:	e12b      	b.n	8000ade <ARGB_Fire+0x28e>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e09f      	b.n	80009cc <ARGB_Fire+0x17c>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800088c:	4b96      	ldr	r3, [pc, #600]	; (8000ae8 <ARGB_Fire+0x298>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	dd03      	ble.n	80008ae <ARGB_Fire+0x5e>
 80008a6:	4b95      	ldr	r3, [pc, #596]	; (8000afc <ARGB_Fire+0x2ac>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	e002      	b.n	80008b4 <ARGB_Fire+0x64>
 80008ae:	4b94      	ldr	r3, [pc, #592]	; (8000b00 <ARGB_Fire+0x2b0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	7bfa      	ldrb	r2, [r7, #15]
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a92      	ldr	r2, [pc, #584]	; (8000b04 <ARGB_Fire+0x2b4>)
 80008bc:	5453      	strb	r3, [r2, r1]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80008be:	4b8a      	ldr	r3, [pc, #552]	; (8000ae8 <ARGB_Fire+0x298>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	dd03      	ble.n	80008e2 <ARGB_Fire+0x92>
 80008da:	4b88      	ldr	r3, [pc, #544]	; (8000afc <ARGB_Fire+0x2ac>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	e002      	b.n	80008e8 <ARGB_Fire+0x98>
 80008e2:	4b87      	ldr	r3, [pc, #540]	; (8000b00 <ARGB_Fire+0x2b0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	7bfa      	ldrb	r2, [r7, #15]
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	3208      	adds	r2, #8
 80008ee:	4985      	ldr	r1, [pc, #532]	; (8000b04 <ARGB_Fire+0x2b4>)
 80008f0:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80008f2:	4b7d      	ldr	r3, [pc, #500]	; (8000ae8 <ARGB_Fire+0x298>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3302      	adds	r3, #2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	2b00      	cmp	r3, #0
 800090c:	dd03      	ble.n	8000916 <ARGB_Fire+0xc6>
 800090e:	4b7b      	ldr	r3, [pc, #492]	; (8000afc <ARGB_Fire+0x2ac>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	e002      	b.n	800091c <ARGB_Fire+0xcc>
 8000916:	4b7a      	ldr	r3, [pc, #488]	; (8000b00 <ARGB_Fire+0x2b0>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	7bfa      	ldrb	r2, [r7, #15]
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	3210      	adds	r2, #16
 8000922:	4978      	ldr	r1, [pc, #480]	; (8000b04 <ARGB_Fire+0x2b4>)
 8000924:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000926:	4b70      	ldr	r3, [pc, #448]	; (8000ae8 <ARGB_Fire+0x298>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3303      	adds	r3, #3
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	461a      	mov	r2, r3
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	2b00      	cmp	r3, #0
 8000940:	dd03      	ble.n	800094a <ARGB_Fire+0xfa>
 8000942:	4b6e      	ldr	r3, [pc, #440]	; (8000afc <ARGB_Fire+0x2ac>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	e002      	b.n	8000950 <ARGB_Fire+0x100>
 800094a:	4b6d      	ldr	r3, [pc, #436]	; (8000b00 <ARGB_Fire+0x2b0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	b2d2      	uxtb	r2, r2
 8000954:	3218      	adds	r2, #24
 8000956:	496b      	ldr	r1, [pc, #428]	; (8000b04 <ARGB_Fire+0x2b4>)
 8000958:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800095a:	4b63      	ldr	r3, [pc, #396]	; (8000ae8 <ARGB_Fire+0x298>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3304      	adds	r3, #4
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	2b00      	cmp	r3, #0
 8000974:	dd03      	ble.n	800097e <ARGB_Fire+0x12e>
 8000976:	4b61      	ldr	r3, [pc, #388]	; (8000afc <ARGB_Fire+0x2ac>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	e002      	b.n	8000984 <ARGB_Fire+0x134>
 800097e:	4b60      	ldr	r3, [pc, #384]	; (8000b00 <ARGB_Fire+0x2b0>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	7bfa      	ldrb	r2, [r7, #15]
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	3220      	adds	r2, #32
 800098a:	495e      	ldr	r1, [pc, #376]	; (8000b04 <ARGB_Fire+0x2b4>)
 800098c:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800098e:	4b56      	ldr	r3, [pc, #344]	; (8000ae8 <ARGB_Fire+0x298>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3305      	adds	r3, #5
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	dd03      	ble.n	80009b2 <ARGB_Fire+0x162>
 80009aa:	4b54      	ldr	r3, [pc, #336]	; (8000afc <ARGB_Fire+0x2ac>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	e002      	b.n	80009b8 <ARGB_Fire+0x168>
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <ARGB_Fire+0x2b0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	3228      	adds	r2, #40	; 0x28
 80009be:	4951      	ldr	r1, [pc, #324]	; (8000b04 <ARGB_Fire+0x2b4>)
 80009c0:	548b      	strb	r3, [r1, r2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	f67f af5b 	bls.w	800088c <ARGB_Fire+0x3c>
        }

        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	75fb      	strb	r3, [r7, #23]
        while (DMA_Send_Stat != HAL_OK) {
 80009da:	e079      	b.n	8000ad0 <ARGB_Fire+0x280>

            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 80009dc:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <ARGB_Fire+0x2b8>)
 80009de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d102      	bne.n	80009ee <ARGB_Fire+0x19e>
                DMA_Send_Stat = HAL_BUSY;
 80009e8:	2302      	movs	r3, #2
 80009ea:	75fb      	strb	r3, [r7, #23]
                continue;
 80009ec:	e070      	b.n	8000ad0 <ARGB_Fire+0x280>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 80009ee:	4b46      	ldr	r3, [pc, #280]	; (8000b08 <ARGB_Fire+0x2b8>)
 80009f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d11d      	bne.n	8000a36 <ARGB_Fire+0x1e6>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 80009fa:	4b43      	ldr	r3, [pc, #268]	; (8000b08 <ARGB_Fire+0x2b8>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            }

#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC1
#define ARGB_TIM_DMA_CC TIM_DMA_CC1
#define ARGB_TIM_CCR CCR1
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000a02:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a06:	4a41      	ldr	r2, [pc, #260]	; (8000b0c <ARGB_Fire+0x2bc>)
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0e:	4a40      	ldr	r2, [pc, #256]	; (8000b10 <ARGB_Fire+0x2c0>)
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000a12:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a3f      	ldr	r2, [pc, #252]	; (8000b14 <ARGB_Fire+0x2c4>)
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000a1a:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a1c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000a1e:	4939      	ldr	r1, [pc, #228]	; (8000b04 <ARGB_Fire+0x2b4>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000a20:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3334      	adds	r3, #52	; 0x34
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000a26:	461a      	mov	r2, r3
 8000a28:	2330      	movs	r3, #48	; 0x30
 8000a2a:	f001 f95b 	bl	8001ce4 <HAL_DMA_Start_IT>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <ARGB_Fire+0x1f2>
 8000a34:	e002      	b.n	8000a3c <ARGB_Fire+0x1ec>
                DMA_Send_Stat = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	75fb      	strb	r3, [r7, #23]
                continue;
 8000a3a:	e049      	b.n	8000ad0 <ARGB_Fire+0x280>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	75fb      	strb	r3, [r7, #23]
                continue;
 8000a40:	e046      	b.n	8000ad0 <ARGB_Fire+0x280>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a50:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a30      	ldr	r2, [pc, #192]	; (8000b18 <ARGB_Fire+0x2c8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d107      	bne.n	8000a6c <ARGB_Fire+0x21c>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a62:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a6a:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a29      	ldr	r2, [pc, #164]	; (8000b18 <ARGB_Fire+0x2c8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00e      	beq.n	8000a94 <ARGB_Fire+0x244>
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a7e:	d009      	beq.n	8000a94 <ARGB_Fire+0x244>
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <ARGB_Fire+0x2cc>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d004      	beq.n	8000a94 <ARGB_Fire+0x244>
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <ARGB_Fire+0x2d0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d111      	bne.n	8000ab8 <ARGB_Fire+0x268>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	613b      	str	r3, [r7, #16]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d011      	beq.n	8000aca <ARGB_Fire+0x27a>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f042 0201 	orr.w	r2, r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000ab6:	e008      	b.n	8000aca <ARGB_Fire+0x27a>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <ARGB_Fire+0x2b8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 0201 	orr.w	r2, r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	e000      	b.n	8000acc <ARGB_Fire+0x27c>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000aca:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	75fb      	strb	r3, [r7, #23]
        while (DMA_Send_Stat != HAL_OK) {
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d182      	bne.n	80009dc <ARGB_Fire+0x18c>
        }
        BUF_COUNTER = 2;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <ARGB_Fire+0x2a4>)
 8000ad8:	2202      	movs	r2, #2
 8000ada:	801a      	strh	r2, [r3, #0]

        return ARGB_OK;
 8000adc:	2302      	movs	r3, #2
    }
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000090 	.word	0x20000090
 8000aec:	2000008c 	.word	0x2000008c
 8000af0:	2000012d 	.word	0x2000012d
 8000af4:	200000c4 	.word	0x200000c4
 8000af8:	20000130 	.word	0x20000130
 8000afc:	2000012c 	.word	0x2000012c
 8000b00:	2000012e 	.word	0x2000012e
 8000b04:	20000094 	.word	0x20000094
 8000b08:	200001b8 	.word	0x200001b8
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000d41 	.word	0x08000d41
 8000b14:	08003207 	.word	0x08003207
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	40000400 	.word	0x40000400
 8000b20:	40000800 	.word	0x40000800

08000b24 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b30:	60fb      	str	r3, [r7, #12]

    // hdma == htim->hdma[TIM_DMA_ID_CC1]
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2201      	movs	r2, #1
 8000b36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <ARGB_TIM_DMADelayPulseCplt+0x24>
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2201      	movs	r2, #1
 8000b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8000b48:	4b74      	ldr	r3, [pc, #464]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4b74      	ldr	r3, [pc, #464]	; (8000d20 <ARGB_TIM_DMADelayPulseCplt+0x1fc>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d278      	bcs.n	8000c4a <ARGB_TIM_DMADelayPulseCplt+0x126>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8000b58:	2300      	movs	r3, #0
 8000b5a:	72fb      	strb	r3, [r7, #11]
 8000b5c:	e069      	b.n	8000c32 <ARGB_TIM_DMADelayPulseCplt+0x10e>
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000b5e:	4b71      	ldr	r3, [pc, #452]	; (8000d24 <ARGB_TIM_DMADelayPulseCplt+0x200>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b6e      	ldr	r3, [pc, #440]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4619      	mov	r1, r3
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	440b      	add	r3, r1
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	7afb      	ldrb	r3, [r7, #11]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dd03      	ble.n	8000b90 <ARGB_TIM_DMADelayPulseCplt+0x6c>
 8000b88:	4b67      	ldr	r3, [pc, #412]	; (8000d28 <ARGB_TIM_DMADelayPulseCplt+0x204>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	e002      	b.n	8000b96 <ARGB_TIM_DMADelayPulseCplt+0x72>
 8000b90:	4b66      	ldr	r3, [pc, #408]	; (8000d2c <ARGB_TIM_DMADelayPulseCplt+0x208>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	7afa      	ldrb	r2, [r7, #11]
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	3218      	adds	r2, #24
 8000b9c:	4964      	ldr	r1, [pc, #400]	; (8000d30 <ARGB_TIM_DMADelayPulseCplt+0x20c>)
 8000b9e:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ba0:	4b60      	ldr	r3, [pc, #384]	; (8000d24 <ARGB_TIM_DMADelayPulseCplt+0x200>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b5d      	ldr	r3, [pc, #372]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	460b      	mov	r3, r1
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	7afb      	ldrb	r3, [r7, #11]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd03      	ble.n	8000bd4 <ARGB_TIM_DMADelayPulseCplt+0xb0>
 8000bcc:	4b56      	ldr	r3, [pc, #344]	; (8000d28 <ARGB_TIM_DMADelayPulseCplt+0x204>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	e002      	b.n	8000bda <ARGB_TIM_DMADelayPulseCplt+0xb6>
 8000bd4:	4b55      	ldr	r3, [pc, #340]	; (8000d2c <ARGB_TIM_DMADelayPulseCplt+0x208>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	7afa      	ldrb	r2, [r7, #11]
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	3220      	adds	r2, #32
 8000be0:	4953      	ldr	r1, [pc, #332]	; (8000d30 <ARGB_TIM_DMADelayPulseCplt+0x20c>)
 8000be2:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000be4:	4b4f      	ldr	r3, [pc, #316]	; (8000d24 <ARGB_TIM_DMADelayPulseCplt+0x200>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b4c      	ldr	r3, [pc, #304]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	440b      	add	r3, r1
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	dd03      	ble.n	8000c18 <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8000c10:	4b45      	ldr	r3, [pc, #276]	; (8000d28 <ARGB_TIM_DMADelayPulseCplt+0x204>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	e002      	b.n	8000c1e <ARGB_TIM_DMADelayPulseCplt+0xfa>
 8000c18:	4b44      	ldr	r3, [pc, #272]	; (8000d2c <ARGB_TIM_DMADelayPulseCplt+0x208>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	7afa      	ldrb	r2, [r7, #11]
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	3228      	adds	r2, #40	; 0x28
 8000c24:	4942      	ldr	r1, [pc, #264]	; (8000d30 <ARGB_TIM_DMADelayPulseCplt+0x20c>)
 8000c26:	548b      	strb	r3, [r1, r2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000c28:	7afb      	ldrb	r3, [r7, #11]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	72fb      	strb	r3, [r7, #11]
 8000c32:	7afb      	ldrb	r3, [r7, #11]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b07      	cmp	r3, #7
 8000c38:	d991      	bls.n	8000b5e <ARGB_TIM_DMADelayPulseCplt+0x3a>
        }
        BUF_COUNTER++;
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	3301      	adds	r3, #1
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000c46:	801a      	strh	r2, [r3, #0]
 8000c48:	e061      	b.n	8000d0e <ARGB_TIM_DMADelayPulseCplt+0x1ea>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8000c4a:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <ARGB_TIM_DMADelayPulseCplt+0x1fc>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	3301      	adds	r3, #1
 8000c52:	4a32      	ldr	r2, [pc, #200]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000c54:	8812      	ldrh	r2, [r2, #0]
 8000c56:	b292      	uxth	r2, r2
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	db0c      	blt.n	8000c76 <ARGB_TIM_DMADelayPulseCplt+0x152>
        memset((u8_t *) &PWM_BUF[PWM_BUF_LEN / 2], 0, PWM_BUF_LEN / 2); // second part
 8000c5c:	2218      	movs	r2, #24
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4834      	ldr	r0, [pc, #208]	; (8000d34 <ARGB_TIM_DMADelayPulseCplt+0x210>)
 8000c62:	f003 fbe5 	bl	8004430 <memset>
        BUF_COUNTER++;
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000c72:	801a      	strh	r2, [r3, #0]
 8000c74:	e04b      	b.n	8000d0e <ARGB_TIM_DMADelayPulseCplt+0x1ea>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <ARGB_TIM_DMADelayPulseCplt+0x1f8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	801a      	strh	r2, [r3, #0]

        // STOP DMA:
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c8a:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 f8c1 	bl	8001e18 <HAL_DMA_Abort_IT>
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <ARGB_TIM_DMADelayPulseCplt+0x214>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d117      	bne.n	8000cd0 <ARGB_TIM_DMADelayPulseCplt+0x1ac>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6a1a      	ldr	r2, [r3, #32]
 8000ca6:	f241 1311 	movw	r3, #4369	; 0x1111
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10f      	bne.n	8000cd0 <ARGB_TIM_DMADelayPulseCplt+0x1ac>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6a1a      	ldr	r2, [r3, #32]
 8000cb6:	f240 4344 	movw	r3, #1092	; 0x444
 8000cba:	4013      	ands	r3, r2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d107      	bne.n	8000cd0 <ARGB_TIM_DMADelayPulseCplt+0x1ac>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cce:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6a1a      	ldr	r2, [r3, #32]
 8000cd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8000cda:	4013      	ands	r3, r2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10f      	bne.n	8000d00 <ARGB_TIM_DMADelayPulseCplt+0x1dc>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6a1a      	ldr	r2, [r3, #32]
 8000ce6:	f240 4344 	movw	r3, #1092	; 0x444
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d107      	bne.n	8000d00 <ARGB_TIM_DMADelayPulseCplt+0x1dc>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        ARGB_LOC_ST = ARGB_READY;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <ARGB_TIM_DMADelayPulseCplt+0x218>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
    }

    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2200      	movs	r2, #0
 8000d12:	771a      	strb	r2, [r3, #28]
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000c4 	.word	0x200000c4
 8000d20:	2000008c 	.word	0x2000008c
 8000d24:	20000090 	.word	0x20000090
 8000d28:	2000012c 	.word	0x2000012c
 8000d2c:	2000012e 	.word	0x2000012e
 8000d30:	20000094 	.word	0x20000094
 8000d34:	200000ac 	.word	0x200000ac
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	2000012d 	.word	0x2000012d

08000d40 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a51      	ldr	r2, [pc, #324]	; (8000e98 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	f040 809c 	bne.w	8000e90 <ARGB_TIM_DMADelayPulseHalfCplt+0x150>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4a50      	ldr	r2, [pc, #320]	; (8000e9c <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	f040 8097 	bne.w	8000e90 <ARGB_TIM_DMADelayPulseHalfCplt+0x150>

    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8000d62:	4b4f      	ldr	r3, [pc, #316]	; (8000ea0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b4e      	ldr	r3, [pc, #312]	; (8000ea4 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d278      	bcs.n	8000e64 <ARGB_TIM_DMADelayPulseHalfCplt+0x124>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	72fb      	strb	r3, [r7, #11]
 8000d76:	e069      	b.n	8000e4c <ARGB_TIM_DMADelayPulseHalfCplt+0x10c>
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000d78:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b48      	ldr	r3, [pc, #288]	; (8000ea0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4619      	mov	r1, r3
 8000d84:	460b      	mov	r3, r1
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	440b      	add	r3, r1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	7afb      	ldrb	r3, [r7, #11]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dd03      	ble.n	8000daa <ARGB_TIM_DMADelayPulseHalfCplt+0x6a>
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	e002      	b.n	8000db0 <ARGB_TIM_DMADelayPulseHalfCplt+0x70>
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	7afa      	ldrb	r2, [r7, #11]
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	4611      	mov	r1, r2
 8000db6:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8000db8:	5453      	strb	r3, [r2, r1]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	440b      	add	r3, r1
 8000dcc:	3301      	adds	r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	7afb      	ldrb	r3, [r7, #11]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	dd03      	ble.n	8000dee <ARGB_TIM_DMADelayPulseHalfCplt+0xae>
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	e002      	b.n	8000df4 <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	7afa      	ldrb	r2, [r7, #11]
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	3208      	adds	r2, #8
 8000dfa:	492e      	ldr	r1, [pc, #184]	; (8000eb4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8000dfc:	548b      	strb	r3, [r1, r2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4619      	mov	r1, r3
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	440b      	add	r3, r1
 8000e10:	3302      	adds	r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	7afb      	ldrb	r3, [r7, #11]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dd03      	ble.n	8000e32 <ARGB_TIM_DMADelayPulseHalfCplt+0xf2>
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	e002      	b.n	8000e38 <ARGB_TIM_DMADelayPulseHalfCplt+0xf8>
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	7afa      	ldrb	r2, [r7, #11]
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	3210      	adds	r2, #16
 8000e3e:	491d      	ldr	r1, [pc, #116]	; (8000eb4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8000e40:	548b      	strb	r3, [r1, r2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	72fb      	strb	r3, [r7, #11]
 8000e4c:	7afb      	ldrb	r3, [r7, #11]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d991      	bls.n	8000d78 <ARGB_TIM_DMADelayPulseHalfCplt+0x38>
        }
        BUF_COUNTER++;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000e60:	801a      	strh	r2, [r3, #0]
 8000e62:	e016      	b.n	8000e92 <ARGB_TIM_DMADelayPulseHalfCplt+0x152>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000e6e:	8812      	ldrh	r2, [r2, #0]
 8000e70:	b292      	uxth	r2, r2
 8000e72:	4293      	cmp	r3, r2
 8000e74:	db0d      	blt.n	8000e92 <ARGB_TIM_DMADelayPulseHalfCplt+0x152>
        memset((u8_t *) &PWM_BUF[0], 0, PWM_BUF_LEN / 2); // first part
 8000e76:	2218      	movs	r2, #24
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8000e7c:	f003 fad8 	bl	8004430 <memset>
        BUF_COUNTER++;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8000e8c:	801a      	strh	r2, [r3, #0]
 8000e8e:	e000      	b.n	8000e92 <ARGB_TIM_DMADelayPulseHalfCplt+0x152>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8000e90:	bf00      	nop
    }
}
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000130 	.word	0x20000130
 8000e9c:	200001b8 	.word	0x200001b8
 8000ea0:	200000c4 	.word	0x200000c4
 8000ea4:	2000008c 	.word	0x2000008c
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	2000012c 	.word	0x2000012c
 8000eb0:	2000012e 	.word	0x2000012e
 8000eb4:	20000094 	.word	0x20000094

08000eb8 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <delay_us+0x2c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8000eca:	bf00      	nop
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <delay_us+0x2c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d3f9      	bcc.n	8000ecc <delay_us+0x14>
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	20000200 	.word	0x20000200

08000ee8 <fireLED>:

void fireLED(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	place = 0;
 8000eee:	4b45      	ldr	r3, [pc, #276]	; (8001004 <fireLED+0x11c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	801a      	strh	r2, [r3, #0]
	for(uint8_t ID = 0; ID < LED_CHANNEL_COUNT; ++ID){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	e07a      	b.n	8000ff0 <fireLED+0x108>
		if(LEDLength[ID] == 0) continue;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4a42      	ldr	r2, [pc, #264]	; (8001008 <fireLED+0x120>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d071      	beq.n	8000fe8 <fireLED+0x100>
		// MUX OUTPUT CHANNEL SELECT
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,  (ID >> 0) & (0x1));
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f12:	483e      	ldr	r0, [pc, #248]	; (800100c <fireLED+0x124>)
 8000f14:	f001 faae 	bl	8002474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,  (ID >> 1) & (0x1));
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	085b      	lsrs	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2a:	4838      	ldr	r0, [pc, #224]	; (800100c <fireLED+0x124>)
 8000f2c:	f001 faa2 	bl	8002474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,  (ID >> 2) & (0x1));
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f42:	4832      	ldr	r0, [pc, #200]	; (800100c <fireLED+0x124>)
 8000f44:	f001 fa96 	bl	8002474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,  (ID >> 3) & (0x1));
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	482c      	ldr	r0, [pc, #176]	; (800100c <fireLED+0x124>)
 8000f5c:	f001 fa8a 	bl	8002474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,  ~(ID >> 3) & (0x1));
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	08db      	lsrs	r3, r3, #3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf0c      	ite	eq
 8000f6e:	2301      	moveq	r3, #1
 8000f70:	2300      	movne	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7a:	4824      	ldr	r0, [pc, #144]	; (800100c <fireLED+0x124>)
 8000f7c:	f001 fa7a 	bl	8002474 <HAL_GPIO_WritePin>

		while (!ARGB_Fire(LED + place*3, LEDLength[ID]));
 8000f80:	bf00      	nop
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <fireLED+0x128>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <fireLED+0x11c>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	440b      	add	r3, r1
 8000f92:	441a      	add	r2, r3
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	491c      	ldr	r1, [pc, #112]	; (8001008 <fireLED+0x120>)
 8000f98:	5ccb      	ldrb	r3, [r1, r3]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f7ff fc56 	bl	8000850 <ARGB_Fire>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0eb      	beq.n	8000f82 <fireLED+0x9a>
		place += LEDLength[ID];
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4a16      	ldr	r2, [pc, #88]	; (8001008 <fireLED+0x120>)
 8000fae:	5cd3      	ldrb	r3, [r2, r3]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <fireLED+0x11c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <fireLED+0x11c>)
 8000fbc:	801a      	strh	r2, [r3, #0]
		if(place == totalLEDLength)
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <fireLED+0x11c>)
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <fireLED+0x12c>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d016      	beq.n	8000ff8 <fireLED+0x110>
			break;
		else
			delay_us(LEDLength[ID]*30 + 100);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <fireLED+0x120>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	3364      	adds	r3, #100	; 0x64
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff69 	bl	8000eb8 <delay_us>
 8000fe6:	e000      	b.n	8000fea <fireLED+0x102>
		if(LEDLength[ID] == 0) continue;
 8000fe8:	bf00      	nop
	for(uint8_t ID = 0; ID < LED_CHANNEL_COUNT; ++ID){
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	3301      	adds	r3, #1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	d981      	bls.n	8000efa <fireLED+0x12>
//			HAL_Delay(LEDLength[ID]/20);
	}
	return;
 8000ff6:	e000      	b.n	8000ffa <fireLED+0x112>
			break;
 8000ff8:	bf00      	nop
	return;
 8000ffa:	bf00      	nop
}
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000011c 	.word	0x2000011c
 8001008:	200000c8 	.word	0x200000c8
 800100c:	40010c00 	.word	0x40010c00
 8001010:	20000118 	.word	0x20000118
 8001014:	200000d8 	.word	0x200000d8

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101e:	f000 fc73 	bl	8001908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001022:	f000 f8af 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001026:	f000 fa27 	bl	8001478 <MX_GPIO_Init>
  MX_DMA_Init();
 800102a:	f000 fa07 	bl	800143c <MX_DMA_Init>
  MX_TIM1_Init();
 800102e:	f000 f8ef 	bl	8001210 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001032:	f000 f9d9 	bl	80013e8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001036:	f000 f98b 	bl	8001350 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800103a:	4849      	ldr	r0, [pc, #292]	; (8001160 <main+0x148>)
 800103c:	f001 feb6 	bl	8002dac <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	4847      	ldr	r0, [pc, #284]	; (8001164 <main+0x14c>)
 8001048:	f001 fa14 	bl	8002474 <HAL_GPIO_WritePin>
  ARGB_Init();
 800104c:	f7ff fb88 	bl	8000760 <ARGB_Init>

  while(1){
	  HAL_UART_Receive(&huart1, LEDLengthReceive1, sizeof(LEDLengthReceive1), 100);
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	2212      	movs	r2, #18
 8001054:	4944      	ldr	r1, [pc, #272]	; (8001168 <main+0x150>)
 8001056:	4845      	ldr	r0, [pc, #276]	; (800116c <main+0x154>)
 8001058:	f002 fcbe 	bl	80039d8 <HAL_UART_Receive>
	  if (LEDLengthReceive1[0]) break;
 800105c:	4b42      	ldr	r3, [pc, #264]	; (8001168 <main+0x150>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d100      	bne.n	8001066 <main+0x4e>
	  HAL_UART_Receive(&huart1, LEDLengthReceive1, sizeof(LEDLengthReceive1), 100);
 8001064:	e7f4      	b.n	8001050 <main+0x38>
	  if (LEDLengthReceive1[0]) break;
 8001066:	bf00      	nop
  }
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001068:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106c:	483d      	ldr	r0, [pc, #244]	; (8001164 <main+0x14c>)
 800106e:	f001 fa19 	bl	80024a4 <HAL_GPIO_TogglePin>
  while(1){
	  HAL_UART_Receive(&huart1, LEDLengthReceive2, sizeof(LEDLengthReceive2), 100);
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2212      	movs	r2, #18
 8001076:	493e      	ldr	r1, [pc, #248]	; (8001170 <main+0x158>)
 8001078:	483c      	ldr	r0, [pc, #240]	; (800116c <main+0x154>)
 800107a:	f002 fcad 	bl	80039d8 <HAL_UART_Receive>
	  if (LEDLengthReceive2[0]) break;
 800107e:	4b3c      	ldr	r3, [pc, #240]	; (8001170 <main+0x158>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d100      	bne.n	8001088 <main+0x70>
	  HAL_UART_Receive(&huart1, LEDLengthReceive2, sizeof(LEDLengthReceive2), 100);
 8001086:	e7f4      	b.n	8001072 <main+0x5a>
	  if (LEDLengthReceive2[0]) break;
 8001088:	bf00      	nop
  }
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800108a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108e:	4835      	ldr	r0, [pc, #212]	; (8001164 <main+0x14c>)
 8001090:	f001 fa08 	bl	80024a4 <HAL_GPIO_TogglePin>
  while(1){
	  HAL_UART_Receive(&huart1, LEDLengthReceive3, sizeof(LEDLengthReceive3), 100);
 8001094:	2364      	movs	r3, #100	; 0x64
 8001096:	2212      	movs	r2, #18
 8001098:	4936      	ldr	r1, [pc, #216]	; (8001174 <main+0x15c>)
 800109a:	4834      	ldr	r0, [pc, #208]	; (800116c <main+0x154>)
 800109c:	f002 fc9c 	bl	80039d8 <HAL_UART_Receive>
	  if (LEDLengthReceive3[0]) break;
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <main+0x15c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d100      	bne.n	80010aa <main+0x92>
	  HAL_UART_Receive(&huart1, LEDLengthReceive3, sizeof(LEDLengthReceive3), 100);
 80010a8:	e7f4      	b.n	8001094 <main+0x7c>
	  if (LEDLengthReceive3[0]) break;
 80010aa:	bf00      	nop
  }

  uint8_t a, b, c;
  for(int i = 0; i < LED_CHANNEL_COUNT; ++i){
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	e02e      	b.n	8001110 <main+0xf8>
	  a = LEDLengthReceive1[i+1];
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <main+0x150>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	70fb      	strb	r3, [r7, #3]
	  b = LEDLengthReceive2[i+1];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a2b      	ldr	r2, [pc, #172]	; (8001170 <main+0x158>)
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	70bb      	strb	r3, [r7, #2]
	  c = LEDLengthReceive3[i+1];
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <main+0x15c>)
 80010cc:	5cd3      	ldrb	r3, [r2, r3]
 80010ce:	707b      	strb	r3, [r7, #1]
	  LEDLength[i] = (a & b) | (a & c) | (b & c);
 80010d0:	78ba      	ldrb	r2, [r7, #2]
 80010d2:	787b      	ldrb	r3, [r7, #1]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	4013      	ands	r3, r2
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	78b9      	ldrb	r1, [r7, #2]
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	400b      	ands	r3, r1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b2d9      	uxtb	r1, r3
 80010ea:	4a23      	ldr	r2, [pc, #140]	; (8001178 <main+0x160>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	460a      	mov	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
	  totalLEDLength += LEDLength[i];
 80010f4:	4a20      	ldr	r2, [pc, #128]	; (8001178 <main+0x160>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <main+0x164>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	b29a      	uxth	r2, r3
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <main+0x164>)
 8001108:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < LED_CHANNEL_COUNT; ++i){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3301      	adds	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	ddcd      	ble.n	80010b2 <main+0x9a>
  }

  LED = calloc(totalLEDLength * 3, sizeof(uint8_t));
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <main+0x164>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f003 f951 	bl	80043cc <calloc>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <main+0x168>)
 8001130:	601a      	str	r2, [r3, #0]
//  for(int i = 0; i < totalLEDLength * 3; ++i)
//	  LED[i] = 50;
//  fireLED();

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001136:	480b      	ldr	r0, [pc, #44]	; (8001164 <main+0x14c>)
 8001138:	f001 f9b4 	bl	80024a4 <HAL_GPIO_TogglePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_UART_Receive(&huart1, LED, totalLEDLength * 3, 100) == HAL_OK)
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <main+0x168>)
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <main+0x164>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	0052      	lsls	r2, r2, #1
 8001148:	4413      	add	r3, r2
 800114a:	b29a      	uxth	r2, r3
 800114c:	2364      	movs	r3, #100	; 0x64
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <main+0x154>)
 8001150:	f002 fc42 	bl	80039d8 <HAL_UART_Receive>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <main+0x124>
		  fireLED();
 800115a:	f7ff fec5 	bl	8000ee8 <fireLED>
	  if(HAL_UART_Receive(&huart1, LED, totalLEDLength * 3, 100) == HAL_OK)
 800115e:	e7ed      	b.n	800113c <main+0x124>
 8001160:	20000200 	.word	0x20000200
 8001164:	40011000 	.word	0x40011000
 8001168:	200000dc 	.word	0x200000dc
 800116c:	20000174 	.word	0x20000174
 8001170:	200000f0 	.word	0x200000f0
 8001174:	20000104 	.word	0x20000104
 8001178:	200000c8 	.word	0x200000c8
 800117c:	200000d8 	.word	0x200000d8
 8001180:	20000118 	.word	0x20000118

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2228      	movs	r2, #40	; 0x28
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f003 f94c 	bl	8004430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2302      	movs	r3, #2
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 f983 	bl	80024d8 <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011d8:	f000 f9de 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fbee 	bl	80029d8 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001202:	f000 f9c9 	bl	8001598 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3740      	adds	r7, #64	; 0x40
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b096      	sub	sp, #88	; 0x58
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2220      	movs	r2, #32
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f003 f8f1 	bl	8004430 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <MX_TIM1_Init+0x138>)
 8001250:	4a3e      	ldr	r2, [pc, #248]	; (800134c <MX_TIM1_Init+0x13c>)
 8001252:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001254:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <MX_TIM1_Init+0x138>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <MX_TIM1_Init+0x138>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001260:	4b39      	ldr	r3, [pc, #228]	; (8001348 <MX_TIM1_Init+0x138>)
 8001262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001266:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b37      	ldr	r3, [pc, #220]	; (8001348 <MX_TIM1_Init+0x138>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <MX_TIM1_Init+0x138>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b34      	ldr	r3, [pc, #208]	; (8001348 <MX_TIM1_Init+0x138>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800127a:	4833      	ldr	r0, [pc, #204]	; (8001348 <MX_TIM1_Init+0x138>)
 800127c:	f001 fd46 	bl	8002d0c <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001286:	f000 f987 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001294:	4619      	mov	r1, r3
 8001296:	482c      	ldr	r0, [pc, #176]	; (8001348 <MX_TIM1_Init+0x138>)
 8001298:	f001 fee8 	bl	800306c <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012a2:	f000 f979 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a6:	4828      	ldr	r0, [pc, #160]	; (8001348 <MX_TIM1_Init+0x138>)
 80012a8:	f001 fdca 	bl	8002e40 <HAL_TIM_PWM_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012b2:	f000 f971 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012c2:	4619      	mov	r1, r3
 80012c4:	4820      	ldr	r0, [pc, #128]	; (8001348 <MX_TIM1_Init+0x138>)
 80012c6:	f002 fa8b 	bl	80037e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012d0:	f000 f962 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d4:	2360      	movs	r3, #96	; 0x60
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	4813      	ldr	r0, [pc, #76]	; (8001348 <MX_TIM1_Init+0x138>)
 80012fa:	f001 fdf9 	bl	8002ef0 <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001304:	f000 f948 	bl	8001598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <MX_TIM1_Init+0x138>)
 800132c:	f002 fab6 	bl	800389c <HAL_TIMEx_ConfigBreakDeadTime>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001336:	f000 f92f 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <MX_TIM1_Init+0x138>)
 800133c:	f000 f9be 	bl	80016bc <HAL_TIM_MspPostInit>

}
 8001340:	bf00      	nop
 8001342:	3758      	adds	r7, #88	; 0x58
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200001b8 	.word	0x200001b8
 800134c:	40012c00 	.word	0x40012c00

08001350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_TIM2_Init+0x94>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001376:	2247      	movs	r2, #71	; 0x47
 8001378:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_TIM2_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001386:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_TIM2_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001396:	f001 fcb9 	bl	8002d0c <HAL_TIM_Base_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013a0:	f000 f8fa 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_TIM2_Init+0x94>)
 80013b2:	f001 fe5b 	bl	800306c <HAL_TIM_ConfigClockSource>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013bc:	f000 f8ec 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_TIM2_Init+0x94>)
 80013ce:	f002 fa07 	bl	80037e0 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013d8:	f000 f8de 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000200 	.word	0x20000200

080013e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_USART1_UART_Init+0x48>)
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <MX_USART1_UART_Init+0x4c>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_USART1_UART_Init+0x48>)
 80013f4:	4a10      	ldr	r2, [pc, #64]	; (8001438 <MX_USART1_UART_Init+0x50>)
 80013f6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <MX_USART1_UART_Init+0x48>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART1_UART_Init+0x48>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_USART1_UART_Init+0x48>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART1_UART_Init+0x48>)
 800140c:	2204      	movs	r2, #4
 800140e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_USART1_UART_Init+0x48>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART1_UART_Init+0x48>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_USART1_UART_Init+0x48>)
 800141e:	f002 fa8e 	bl	800393e <HAL_UART_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001428:	f000 f8b6 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000174 	.word	0x20000174
 8001434:	40013800 	.word	0x40013800
 8001438:	000f4240 	.word	0x000f4240

0800143c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_DMA_Init+0x38>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <MX_DMA_Init+0x38>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_DMA_Init+0x38>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	200c      	movs	r0, #12
 8001460:	f000 fbaf 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001464:	200c      	movs	r0, #12
 8001466:	f000 fbc8 	bl	8001bfa <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <MX_GPIO_Init+0xd0>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <MX_GPIO_Init+0xd0>)
 8001492:	f043 0310 	orr.w	r3, r3, #16
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <MX_GPIO_Init+0xd0>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a27      	ldr	r2, [pc, #156]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014aa:	f043 0320 	orr.w	r3, r3, #32
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a21      	ldr	r2, [pc, #132]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <MX_GPIO_Init+0xd0>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f2:	4816      	ldr	r0, [pc, #88]	; (800154c <MX_GPIO_Init+0xd4>)
 80014f4:	f000 ffbe 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80014fe:	4814      	ldr	r0, [pc, #80]	; (8001550 <MX_GPIO_Init+0xd8>)
 8001500:	f000 ffb8 	bl	8002474 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2302      	movs	r3, #2
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	4619      	mov	r1, r3
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <MX_GPIO_Init+0xd4>)
 800151e:	f000 fe25 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001522:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001526:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2302      	movs	r3, #2
 8001532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_GPIO_Init+0xd8>)
 800153c:	f000 fe16 	bl	800216c <HAL_GPIO_Init>

}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	40011000 	.word	0x40011000
 8001550:	40010c00 	.word	0x40010c00

08001554 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800155c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001560:	4809      	ldr	r0, [pc, #36]	; (8001588 <HAL_UART_RxCpltCallback+0x34>)
 8001562:	f000 ff9f 	bl	80024a4 <HAL_GPIO_TogglePin>
//	flag = 1;
    HAL_UART_Receive_IT(&huart1, LED, totalLEDLength * 3);
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_UART_RxCpltCallback+0x38>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_UART_RxCpltCallback+0x3c>)
 800156c:	8812      	ldrh	r2, [r2, #0]
 800156e:	4611      	mov	r1, r2
 8001570:	0049      	lsls	r1, r1, #1
 8001572:	440a      	add	r2, r1
 8001574:	b292      	uxth	r2, r2
 8001576:	4619      	mov	r1, r3
 8001578:	4806      	ldr	r0, [pc, #24]	; (8001594 <HAL_UART_RxCpltCallback+0x40>)
 800157a:	f002 facf 	bl	8003b1c <HAL_UART_Receive_IT>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40011000 	.word	0x40011000
 800158c:	20000118 	.word	0x20000118
 8001590:	200000d8 	.word	0x200000d8
 8001594:	20000174 	.word	0x20000174

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_MspInit+0x5c>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <HAL_MspInit+0x5c>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_MspInit+0x5c>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_MspInit+0x5c>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_MspInit+0x5c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_MspInit+0x5c>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_MspInit+0x60>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_MspInit+0x60>)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a25      	ldr	r2, [pc, #148]	; (80016ac <HAL_TIM_Base_MspInit+0xa4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d133      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_TIM_Base_MspInit+0xa8>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <HAL_TIM_Base_MspInit+0xa8>)
 8001620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_TIM_Base_MspInit+0xa8>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 8001634:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <HAL_TIM_Base_MspInit+0xb0>)
 8001636:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 800163a:	2210      	movs	r2, #16
 800163c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 800164c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001650:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 800165a:	2220      	movs	r2, #32
 800165c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 8001666:	f000 fae3 	bl	8001c30 <HAL_DMA_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001670:	f7ff ff92 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_TIM_Base_MspInit+0xac>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001680:	e010      	b.n	80016a4 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800168a:	d10b      	bne.n	80016a4 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_TIM_Base_MspInit+0xa8>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_TIM_Base_MspInit+0xa8>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	61d3      	str	r3, [r2, #28]
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_TIM_Base_MspInit+0xa8>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	20000130 	.word	0x20000130
 80016b8:	4002001c 	.word	0x4002001c

080016bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_TIM_MspPostInit+0x5c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d118      	bne.n	800170e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_TIM_MspPostInit+0x60>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_TIM_MspPostInit+0x60>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_TIM_MspPostInit+0x60>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fa:	2312      	movs	r3, #18
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2302      	movs	r3, #2
 8001700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_TIM_MspPostInit+0x64>)
 800170a:	f000 fd2f 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40010800 	.word	0x40010800

08001724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <HAL_UART_MspInit+0x9c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d139      	bne.n	80017b8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_UART_MspInit+0xa0>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <HAL_UART_MspInit+0xa0>)
 800174a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_UART_MspInit+0xa0>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_UART_MspInit+0xa0>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_UART_MspInit+0xa0>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_UART_MspInit+0xa0>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	4619      	mov	r1, r3
 8001788:	480f      	ldr	r0, [pc, #60]	; (80017c8 <HAL_UART_MspInit+0xa4>)
 800178a:	f000 fcef 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800178e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001798:	2301      	movs	r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <HAL_UART_MspInit+0xa4>)
 80017a4:	f000 fce2 	bl	800216c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2025      	movs	r0, #37	; 0x25
 80017ae:	f000 fa08 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017b2:	2025      	movs	r0, #37	; 0x25
 80017b4:	f000 fa21 	bl	8001bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010800 	.word	0x40010800

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f000 f8bf 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA1_Channel2_IRQHandler+0x10>)
 8001822:	f000 fb6f 	bl	8001f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000130 	.word	0x20000130

08001830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <USART1_IRQHandler+0x10>)
 8001836:	f002 f9a1 	bl	8003b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000174 	.word	0x20000174

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f002 fdb2 	bl	80043dc <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20005000 	.word	0x20005000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	20000120 	.word	0x20000120
 80018ac:	20000260 	.word	0x20000260

080018b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018be:	490d      	ldr	r1, [pc, #52]	; (80018f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d4:	4c0a      	ldr	r4, [pc, #40]	; (8001900 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e2:	f7ff ffe5 	bl	80018b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f002 fd7f 	bl	80043e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ea:	f7ff fb95 	bl	8001018 <main>
  bx lr
 80018ee:	4770      	bx	lr
  ldr r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018f8:	08004594 	.word	0x08004594
  ldr r2, =_sbss
 80018fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001900:	2000025c 	.word	0x2000025c

08001904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_2_IRQHandler>
	...

08001908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_Init+0x28>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_Init+0x28>)
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 f947 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	200f      	movs	r0, #15
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fe3e 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40022000 	.word	0x40022000

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f95f 	bl	8001c16 <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 f927 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000000 	.word	0x20000000
 800198c:	20000008 	.word	0x20000008
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_IncTick+0x1c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_IncTick+0x20>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_IncTick+0x20>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000248 	.word	0x20000248

080019b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <HAL_GetTick+0x10>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000248 	.word	0x20000248

080019cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff fff0 	bl	80019b8 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_Delay+0x44>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffe0 	bl	80019b8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4906      	ldr	r1, [pc, #24]	; (8001aac <__NVIC_EnableIRQ+0x34>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff90 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff2d 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff42 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff90 	bl	8001b04 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5f 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff35 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffa2 	bl	8001b68 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e043      	b.n	8001cce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_DMA_Init+0xa8>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a22      	ldr	r2, [pc, #136]	; (8001cdc <HAL_DMA_Init+0xac>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	009a      	lsls	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <HAL_DMA_Init+0xb0>)
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	bffdfff8 	.word	0xbffdfff8
 8001cdc:	cccccccd 	.word	0xcccccccd
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Start_IT+0x20>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e04a      	b.n	8001d9a <HAL_DMA_Start_IT+0xb6>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d13a      	bne.n	8001d8c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f9e8 	bl	8002110 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 020e 	orr.w	r2, r2, #14
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e00f      	b.n	8001d7a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0204 	bic.w	r2, r2, #4
 8001d68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 020a 	orr.w	r2, r2, #10
 8001d78:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e005      	b.n	8001d98 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
 8001d96:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b085      	sub	sp, #20
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d008      	beq.n	8001dca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2204      	movs	r2, #4
 8001dbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e020      	b.n	8001e0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 020e 	bic.w	r2, r2, #14
 8001dd8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d005      	beq.n	8001e3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2204      	movs	r2, #4
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e051      	b.n	8001ede <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 020e 	bic.w	r2, r2, #14
 8001e48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0201 	bic.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <HAL_DMA_Abort_IT+0xd0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d029      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0xa0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a20      	ldr	r2, [pc, #128]	; (8001eec <HAL_DMA_Abort_IT+0xd4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d022      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x9c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <HAL_DMA_Abort_IT+0xd8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d01a      	beq.n	8001eae <HAL_DMA_Abort_IT+0x96>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <HAL_DMA_Abort_IT+0xdc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d012      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0x90>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <HAL_DMA_Abort_IT+0xe0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x8a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <HAL_DMA_Abort_IT+0xe4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d102      	bne.n	8001e9c <HAL_DMA_Abort_IT+0x84>
 8001e96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e9a:	e00e      	b.n	8001eba <HAL_DMA_Abort_IT+0xa2>
 8001e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea0:	e00b      	b.n	8001eba <HAL_DMA_Abort_IT+0xa2>
 8001ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea6:	e008      	b.n	8001eba <HAL_DMA_Abort_IT+0xa2>
 8001ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eac:	e005      	b.n	8001eba <HAL_DMA_Abort_IT+0xa2>
 8001eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb2:	e002      	b.n	8001eba <HAL_DMA_Abort_IT+0xa2>
 8001eb4:	2310      	movs	r3, #16
 8001eb6:	e000      	b.n	8001eba <HAL_DMA_Abort_IT+0xa2>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_DMA_Abort_IT+0xe8>)
 8001ebc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
    } 
  }
  return status;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40020008 	.word	0x40020008
 8001eec:	4002001c 	.word	0x4002001c
 8001ef0:	40020030 	.word	0x40020030
 8001ef4:	40020044 	.word	0x40020044
 8001ef8:	40020058 	.word	0x40020058
 8001efc:	4002006c 	.word	0x4002006c
 8001f00:	40020000 	.word	0x40020000

08001f04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	2204      	movs	r2, #4
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d04f      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xc8>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d04a      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0204 	bic.w	r2, r2, #4
 8001f52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a66      	ldr	r2, [pc, #408]	; (80020f4 <HAL_DMA_IRQHandler+0x1f0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d029      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xae>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_DMA_IRQHandler+0x1f4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <HAL_DMA_IRQHandler+0xaa>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a63      	ldr	r2, [pc, #396]	; (80020fc <HAL_DMA_IRQHandler+0x1f8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01a      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0xa4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a62      	ldr	r2, [pc, #392]	; (8002100 <HAL_DMA_IRQHandler+0x1fc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d012      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x9e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a60      	ldr	r2, [pc, #384]	; (8002104 <HAL_DMA_IRQHandler+0x200>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00a      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x98>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5f      	ldr	r2, [pc, #380]	; (8002108 <HAL_DMA_IRQHandler+0x204>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d102      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x92>
 8001f90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f94:	e00e      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f9a:	e00b      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001f9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fa0:	e008      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa6:	e005      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fac:	e002      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001fae:	2340      	movs	r3, #64	; 0x40
 8001fb0:	e000      	b.n	8001fb4 <HAL_DMA_IRQHandler+0xb0>
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	4a55      	ldr	r2, [pc, #340]	; (800210c <HAL_DMA_IRQHandler+0x208>)
 8001fb6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8094 	beq.w	80020ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fca:	e08e      	b.n	80020ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d056      	beq.n	800208a <HAL_DMA_IRQHandler+0x186>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d051      	beq.n	800208a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10b      	bne.n	800200c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 020a 	bic.w	r2, r2, #10
 8002002:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a38      	ldr	r2, [pc, #224]	; (80020f4 <HAL_DMA_IRQHandler+0x1f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d029      	beq.n	800206a <HAL_DMA_IRQHandler+0x166>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a37      	ldr	r2, [pc, #220]	; (80020f8 <HAL_DMA_IRQHandler+0x1f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_IRQHandler+0x162>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_DMA_IRQHandler+0x1f8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01a      	beq.n	8002060 <HAL_DMA_IRQHandler+0x15c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_DMA_IRQHandler+0x1fc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d012      	beq.n	800205a <HAL_DMA_IRQHandler+0x156>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_DMA_IRQHandler+0x200>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00a      	beq.n	8002054 <HAL_DMA_IRQHandler+0x150>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_DMA_IRQHandler+0x204>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d102      	bne.n	800204e <HAL_DMA_IRQHandler+0x14a>
 8002048:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800204c:	e00e      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 800204e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002052:	e00b      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 8002054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002058:	e008      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 800205a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205e:	e005      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 8002060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002064:	e002      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 8002066:	2320      	movs	r3, #32
 8002068:	e000      	b.n	800206c <HAL_DMA_IRQHandler+0x168>
 800206a:	2302      	movs	r3, #2
 800206c:	4a27      	ldr	r2, [pc, #156]	; (800210c <HAL_DMA_IRQHandler+0x208>)
 800206e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d034      	beq.n	80020ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002088:	e02f      	b.n	80020ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2208      	movs	r2, #8
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d028      	beq.n	80020ec <HAL_DMA_IRQHandler+0x1e8>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d023      	beq.n	80020ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 020e 	bic.w	r2, r2, #14
 80020b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	2101      	movs	r1, #1
 80020be:	fa01 f202 	lsl.w	r2, r1, r2
 80020c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
    }
  }
  return;
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
}
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40020008 	.word	0x40020008
 80020f8:	4002001c 	.word	0x4002001c
 80020fc:	40020030 	.word	0x40020030
 8002100:	40020044 	.word	0x40020044
 8002104:	40020058 	.word	0x40020058
 8002108:	4002006c 	.word	0x4002006c
 800210c:	40020000 	.word	0x40020000

08002110 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b10      	cmp	r3, #16
 800213c:	d108      	bne.n	8002150 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800214e:	e007      	b.n	8002160 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
	...

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b08b      	sub	sp, #44	; 0x2c
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217e:	e169      	b.n	8002454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002180:	2201      	movs	r2, #1
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 8158 	bne.w	800244e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a9a      	ldr	r2, [pc, #616]	; (800240c <HAL_GPIO_Init+0x2a0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d05e      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021a8:	4a98      	ldr	r2, [pc, #608]	; (800240c <HAL_GPIO_Init+0x2a0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d875      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021ae:	4a98      	ldr	r2, [pc, #608]	; (8002410 <HAL_GPIO_Init+0x2a4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d058      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021b4:	4a96      	ldr	r2, [pc, #600]	; (8002410 <HAL_GPIO_Init+0x2a4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d86f      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021ba:	4a96      	ldr	r2, [pc, #600]	; (8002414 <HAL_GPIO_Init+0x2a8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d052      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021c0:	4a94      	ldr	r2, [pc, #592]	; (8002414 <HAL_GPIO_Init+0x2a8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d869      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021c6:	4a94      	ldr	r2, [pc, #592]	; (8002418 <HAL_GPIO_Init+0x2ac>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d04c      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021cc:	4a92      	ldr	r2, [pc, #584]	; (8002418 <HAL_GPIO_Init+0x2ac>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d863      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021d2:	4a92      	ldr	r2, [pc, #584]	; (800241c <HAL_GPIO_Init+0x2b0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d046      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
 80021d8:	4a90      	ldr	r2, [pc, #576]	; (800241c <HAL_GPIO_Init+0x2b0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d85d      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d82a      	bhi.n	8002238 <HAL_GPIO_Init+0xcc>
 80021e2:	2b12      	cmp	r3, #18
 80021e4:	d859      	bhi.n	800229a <HAL_GPIO_Init+0x12e>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <HAL_GPIO_Init+0x80>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	08002267 	.word	0x08002267
 80021f0:	08002241 	.word	0x08002241
 80021f4:	08002253 	.word	0x08002253
 80021f8:	08002295 	.word	0x08002295
 80021fc:	0800229b 	.word	0x0800229b
 8002200:	0800229b 	.word	0x0800229b
 8002204:	0800229b 	.word	0x0800229b
 8002208:	0800229b 	.word	0x0800229b
 800220c:	0800229b 	.word	0x0800229b
 8002210:	0800229b 	.word	0x0800229b
 8002214:	0800229b 	.word	0x0800229b
 8002218:	0800229b 	.word	0x0800229b
 800221c:	0800229b 	.word	0x0800229b
 8002220:	0800229b 	.word	0x0800229b
 8002224:	0800229b 	.word	0x0800229b
 8002228:	0800229b 	.word	0x0800229b
 800222c:	0800229b 	.word	0x0800229b
 8002230:	08002249 	.word	0x08002249
 8002234:	0800225d 	.word	0x0800225d
 8002238:	4a79      	ldr	r2, [pc, #484]	; (8002420 <HAL_GPIO_Init+0x2b4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800223e:	e02c      	b.n	800229a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	623b      	str	r3, [r7, #32]
          break;
 8002246:	e029      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	3304      	adds	r3, #4
 800224e:	623b      	str	r3, [r7, #32]
          break;
 8002250:	e024      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	3308      	adds	r3, #8
 8002258:	623b      	str	r3, [r7, #32]
          break;
 800225a:	e01f      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	330c      	adds	r3, #12
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e01a      	b.n	800229c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800226e:	2304      	movs	r3, #4
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e013      	b.n	800229c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800227c:	2308      	movs	r3, #8
 800227e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	611a      	str	r2, [r3, #16]
          break;
 8002286:	e009      	b.n	800229c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002288:	2308      	movs	r3, #8
 800228a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	615a      	str	r2, [r3, #20]
          break;
 8002292:	e003      	b.n	800229c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
          break;
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x130>
          break;
 800229a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2bff      	cmp	r3, #255	; 0xff
 80022a0:	d801      	bhi.n	80022a6 <HAL_GPIO_Init+0x13a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	e001      	b.n	80022aa <HAL_GPIO_Init+0x13e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d802      	bhi.n	80022b8 <HAL_GPIO_Init+0x14c>
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	e002      	b.n	80022be <HAL_GPIO_Init+0x152>
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	3b08      	subs	r3, #8
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	210f      	movs	r1, #15
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	401a      	ands	r2, r3
 80022d0:	6a39      	ldr	r1, [r7, #32]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	431a      	orrs	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80b1 	beq.w	800244e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ec:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <HAL_GPIO_Init+0x2b8>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <HAL_GPIO_Init+0x2b8>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6193      	str	r3, [r2, #24]
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_GPIO_Init+0x2b8>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002304:	4a48      	ldr	r2, [pc, #288]	; (8002428 <HAL_GPIO_Init+0x2bc>)
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a40      	ldr	r2, [pc, #256]	; (800242c <HAL_GPIO_Init+0x2c0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_GPIO_Init+0x1ec>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <HAL_GPIO_Init+0x2c4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00d      	beq.n	8002354 <HAL_GPIO_Init+0x1e8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3e      	ldr	r2, [pc, #248]	; (8002434 <HAL_GPIO_Init+0x2c8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <HAL_GPIO_Init+0x1e4>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3d      	ldr	r2, [pc, #244]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_GPIO_Init+0x1e0>
 8002348:	2303      	movs	r3, #3
 800234a:	e006      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 800234c:	2304      	movs	r3, #4
 800234e:	e004      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 8002350:	2302      	movs	r3, #2
 8002352:	e002      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_GPIO_Init+0x1ee>
 8002358:	2300      	movs	r3, #0
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	f002 0203 	and.w	r2, r2, #3
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	4093      	lsls	r3, r2
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800236a:	492f      	ldr	r1, [pc, #188]	; (8002428 <HAL_GPIO_Init+0x2bc>)
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_GPIO_Init+0x2d0>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	492c      	ldr	r1, [pc, #176]	; (800243c <HAL_GPIO_Init+0x2d0>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_GPIO_Init+0x2d0>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	43db      	mvns	r3, r3
 800239a:	4928      	ldr	r1, [pc, #160]	; (800243c <HAL_GPIO_Init+0x2d0>)
 800239c:	4013      	ands	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	491e      	ldr	r1, [pc, #120]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4918      	ldr	r1, [pc, #96]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	4914      	ldr	r1, [pc, #80]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d021      	beq.n	8002440 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <HAL_GPIO_Init+0x2d0>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_GPIO_Init+0x2d0>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
 8002408:	e021      	b.n	800244e <HAL_GPIO_Init+0x2e2>
 800240a:	bf00      	nop
 800240c:	10320000 	.word	0x10320000
 8002410:	10310000 	.word	0x10310000
 8002414:	10220000 	.word	0x10220000
 8002418:	10210000 	.word	0x10210000
 800241c:	10120000 	.word	0x10120000
 8002420:	10110000 	.word	0x10110000
 8002424:	40021000 	.word	0x40021000
 8002428:	40010000 	.word	0x40010000
 800242c:	40010800 	.word	0x40010800
 8002430:	40010c00 	.word	0x40010c00
 8002434:	40011000 	.word	0x40011000
 8002438:	40011400 	.word	0x40011400
 800243c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	43db      	mvns	r3, r3
 8002448:	4909      	ldr	r1, [pc, #36]	; (8002470 <HAL_GPIO_Init+0x304>)
 800244a:	4013      	ands	r3, r2
 800244c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3301      	adds	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	f47f ae8e 	bne.w	8002180 <HAL_GPIO_Init+0x14>
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	372c      	adds	r7, #44	; 0x2c
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	611a      	str	r2, [r3, #16]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43d9      	mvns	r1, r3
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	400b      	ands	r3, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e26c      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8087 	beq.w	8002606 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f8:	4b92      	ldr	r3, [pc, #584]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	2b04      	cmp	r3, #4
 8002502:	d00c      	beq.n	800251e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002504:	4b8f      	ldr	r3, [pc, #572]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d112      	bne.n	8002536 <HAL_RCC_OscConfig+0x5e>
 8002510:	4b8c      	ldr	r3, [pc, #560]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d10b      	bne.n	8002536 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251e:	4b89      	ldr	r3, [pc, #548]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d06c      	beq.n	8002604 <HAL_RCC_OscConfig+0x12c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d168      	bne.n	8002604 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e246      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x76>
 8002540:	4b80      	ldr	r3, [pc, #512]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a7f      	ldr	r2, [pc, #508]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e02e      	b.n	80025ac <HAL_RCC_OscConfig+0xd4>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x98>
 8002556:	4b7b      	ldr	r3, [pc, #492]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7a      	ldr	r2, [pc, #488]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800255c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b78      	ldr	r3, [pc, #480]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a77      	ldr	r2, [pc, #476]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e01d      	b.n	80025ac <HAL_RCC_OscConfig+0xd4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0xbc>
 800257a:	4b72      	ldr	r3, [pc, #456]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a71      	ldr	r2, [pc, #452]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b6f      	ldr	r3, [pc, #444]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0xd4>
 8002594:	4b6b      	ldr	r3, [pc, #428]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6a      	ldr	r2, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a67      	ldr	r2, [pc, #412]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7ff fa00 	bl	80019b8 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff f9fc 	bl	80019b8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1fa      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0xe4>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff f9ec 	bl	80019b8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e4:	f7ff f9e8 	bl	80019b8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1e6      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x10c>
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d063      	beq.n	80026da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002612:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800261e:	4b49      	ldr	r3, [pc, #292]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b08      	cmp	r3, #8
 8002628:	d11c      	bne.n	8002664 <HAL_RCC_OscConfig+0x18c>
 800262a:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d116      	bne.n	8002664 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	4b43      	ldr	r3, [pc, #268]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x176>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e1ba      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4939      	ldr	r1, [pc, #228]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	e03a      	b.n	80026da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266c:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_RCC_OscConfig+0x270>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff f9a1 	bl	80019b8 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267a:	f7ff f99d 	bl	80019b8 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e19b      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4927      	ldr	r1, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_RCC_OscConfig+0x270>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff f980 	bl	80019b8 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026bc:	f7ff f97c 	bl	80019b8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e17a      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d03a      	beq.n	800275c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d019      	beq.n	8002722 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_RCC_OscConfig+0x274>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7ff f960 	bl	80019b8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fc:	f7ff f95c 	bl	80019b8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e15a      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800271a:	2001      	movs	r0, #1
 800271c:	f000 fad8 	bl	8002cd0 <RCC_Delay>
 8002720:	e01c      	b.n	800275c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_RCC_OscConfig+0x274>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7ff f946 	bl	80019b8 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272e:	e00f      	b.n	8002750 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002730:	f7ff f942 	bl	80019b8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d908      	bls.n	8002750 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e140      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	42420000 	.word	0x42420000
 800274c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b9e      	ldr	r3, [pc, #632]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e9      	bne.n	8002730 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a6 	beq.w	80028b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b97      	ldr	r3, [pc, #604]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4b94      	ldr	r3, [pc, #592]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4a93      	ldr	r2, [pc, #588]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	61d3      	str	r3, [r2, #28]
 8002786:	4b91      	ldr	r3, [pc, #580]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <HAL_RCC_OscConfig+0x4f8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d118      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a2:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a8a      	ldr	r2, [pc, #552]	; (80029d0 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ae:	f7ff f903 	bl	80019b8 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b6:	f7ff f8ff 	bl	80019b8 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0fd      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x312>
 80027dc:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4a7a      	ldr	r2, [pc, #488]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6213      	str	r3, [r2, #32]
 80027e8:	e02d      	b.n	8002846 <HAL_RCC_OscConfig+0x36e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x334>
 80027f2:	4b76      	ldr	r3, [pc, #472]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a75      	ldr	r2, [pc, #468]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4b73      	ldr	r3, [pc, #460]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a72      	ldr	r2, [pc, #456]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6213      	str	r3, [r2, #32]
 800280a:	e01c      	b.n	8002846 <HAL_RCC_OscConfig+0x36e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b05      	cmp	r3, #5
 8002812:	d10c      	bne.n	800282e <HAL_RCC_OscConfig+0x356>
 8002814:	4b6d      	ldr	r3, [pc, #436]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4a6c      	ldr	r2, [pc, #432]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	6213      	str	r3, [r2, #32]
 8002820:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a69      	ldr	r2, [pc, #420]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	e00b      	b.n	8002846 <HAL_RCC_OscConfig+0x36e>
 800282e:	4b67      	ldr	r3, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4a66      	ldr	r2, [pc, #408]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6213      	str	r3, [r2, #32]
 800283a:	4b64      	ldr	r3, [pc, #400]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4a63      	ldr	r2, [pc, #396]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d015      	beq.n	800287a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7ff f8b3 	bl	80019b8 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7ff f8af 	bl	80019b8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0ab      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	4b57      	ldr	r3, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ee      	beq.n	8002856 <HAL_RCC_OscConfig+0x37e>
 8002878:	e014      	b.n	80028a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7ff f89d 	bl	80019b8 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7ff f899 	bl	80019b8 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e095      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1ee      	bne.n	8002882 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d105      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028aa:	4b48      	ldr	r3, [pc, #288]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4a47      	ldr	r2, [pc, #284]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8081 	beq.w	80029c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c0:	4b42      	ldr	r3, [pc, #264]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d061      	beq.n	8002990 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d146      	bne.n	8002962 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <HAL_RCC_OscConfig+0x4fc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7ff f86d 	bl	80019b8 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e2:	f7ff f869 	bl	80019b8 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e067      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f4:	4b35      	ldr	r3, [pc, #212]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002908:	d108      	bne.n	800291c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	492d      	ldr	r1, [pc, #180]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a19      	ldr	r1, [r3, #32]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	430b      	orrs	r3, r1
 800292e:	4927      	ldr	r1, [pc, #156]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <HAL_RCC_OscConfig+0x4fc>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7ff f83d 	bl	80019b8 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002942:	f7ff f839 	bl	80019b8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e037      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x46a>
 8002960:	e02f      	b.n	80029c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <HAL_RCC_OscConfig+0x4fc>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7ff f826 	bl	80019b8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff f822 	bl	80019b8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e020      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x498>
 800298e:	e018      	b.n	80029c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e013      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d001      	beq.n	80029c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42420060 	.word	0x42420060

080029d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0d0      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b6a      	ldr	r3, [pc, #424]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4965      	ldr	r1, [pc, #404]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	494d      	ldr	r1, [pc, #308]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d040      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d115      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a96:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e073      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06b      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4936      	ldr	r1, [pc, #216]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe ff76 	bl	80019b8 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7fe ff72 	bl	80019b8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e053      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 020c 	and.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1eb      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d210      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	4922      	ldr	r1, [pc, #136]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4916      	ldr	r1, [pc, #88]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b66:	f000 f821 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	490a      	ldr	r1, [pc, #40]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b78:	5ccb      	ldrb	r3, [r1, r3]
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fed4 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08004574 	.word	0x08004574
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	20000004 	.word	0x20000004

08002bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b490      	push	{r4, r7}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bb4:	1d3c      	adds	r4, r7, #4
 8002bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bbc:	f240 2301 	movw	r3, #513	; 0x201
 8002bc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x40>
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x46>
 8002bea:	e02d      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bee:	623b      	str	r3, [r7, #32]
      break;
 8002bf0:	e02d      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	0c9b      	lsrs	r3, r3, #18
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bfe:	4413      	add	r3, r2
 8002c00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	0c5b      	lsrs	r3, r3, #17
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c1e:	4413      	add	r3, r2
 8002c20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c2a:	fb02 f203 	mul.w	r2, r2, r3
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	e004      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	4a0b      	ldr	r2, [pc, #44]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	623b      	str	r3, [r7, #32]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c4a:	623b      	str	r3, [r7, #32]
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3728      	adds	r7, #40	; 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc90      	pop	{r4, r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	08004564 	.word	0x08004564
 8002c60:	40021000 	.word	0x40021000
 8002c64:	007a1200 	.word	0x007a1200
 8002c68:	003d0900 	.word	0x003d0900

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b02      	ldr	r3, [pc, #8]	; (8002c7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	20000000 	.word	0x20000000

08002c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c84:	f7ff fff2 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	4903      	ldr	r1, [pc, #12]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	08004584 	.word	0x08004584

08002ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cac:	f7ff ffde 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	0adb      	lsrs	r3, r3, #11
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4903      	ldr	r1, [pc, #12]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08004584 	.word	0x08004584

08002cd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <RCC_Delay+0x34>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <RCC_Delay+0x38>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0a5b      	lsrs	r3, r3, #9
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cec:	bf00      	nop
  }
  while (Delay --);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1e5a      	subs	r2, r3, #1
 8002cf2:	60fa      	str	r2, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f9      	bne.n	8002cec <RCC_Delay+0x1c>
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	20000000 	.word	0x20000000
 8002d08:	10624dd3 	.word	0x10624dd3

08002d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e041      	b.n	8002da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fc68 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f000 faa4 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d001      	beq.n	8002dc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e032      	b.n	8002e2a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_TIM_Base_Start+0x88>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <HAL_TIM_Base_Start+0x48>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dde:	d009      	beq.n	8002df4 <HAL_TIM_Base_Start+0x48>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <HAL_TIM_Base_Start+0x8c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_Base_Start+0x48>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a13      	ldr	r2, [pc, #76]	; (8002e3c <HAL_TIM_Base_Start+0x90>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d010      	beq.n	8002e28 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	e007      	b.n	8002e28 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800

08002e40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f839 	bl	8002ede <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 fa0a 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e0ac      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	f200 809f 	bhi.w	8003058 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f55 	.word	0x08002f55
 8002f24:	08003059 	.word	0x08003059
 8002f28:	08003059 	.word	0x08003059
 8002f2c:	08003059 	.word	0x08003059
 8002f30:	08002f95 	.word	0x08002f95
 8002f34:	08003059 	.word	0x08003059
 8002f38:	08003059 	.word	0x08003059
 8002f3c:	08003059 	.word	0x08003059
 8002f40:	08002fd7 	.word	0x08002fd7
 8002f44:	08003059 	.word	0x08003059
 8002f48:	08003059 	.word	0x08003059
 8002f4c:	08003059 	.word	0x08003059
 8002f50:	08003017 	.word	0x08003017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f9fe 	bl	800335c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0208 	orr.w	r2, r2, #8
 8002f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0204 	bic.w	r2, r2, #4
 8002f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6999      	ldr	r1, [r3, #24]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	619a      	str	r2, [r3, #24]
      break;
 8002f92:	e062      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fa44 	bl	8003428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]
      break;
 8002fd4:	e041      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fa8d 	bl	80034fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0208 	orr.w	r2, r2, #8
 8002ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0204 	bic.w	r2, r2, #4
 8003000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	61da      	str	r2, [r3, #28]
      break;
 8003014:	e021      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fad7 	bl	80035d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69d9      	ldr	r1, [r3, #28]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	61da      	str	r2, [r3, #28]
      break;
 8003056:	e000      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003058:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_TIM_ConfigClockSource+0x18>
 8003080:	2302      	movs	r3, #2
 8003082:	e0b3      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x180>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030bc:	d03e      	beq.n	800313c <HAL_TIM_ConfigClockSource+0xd0>
 80030be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c2:	f200 8087 	bhi.w	80031d4 <HAL_TIM_ConfigClockSource+0x168>
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ca:	f000 8085 	beq.w	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	d87f      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x168>
 80030d4:	2b70      	cmp	r3, #112	; 0x70
 80030d6:	d01a      	beq.n	800310e <HAL_TIM_ConfigClockSource+0xa2>
 80030d8:	2b70      	cmp	r3, #112	; 0x70
 80030da:	d87b      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x168>
 80030dc:	2b60      	cmp	r3, #96	; 0x60
 80030de:	d050      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x116>
 80030e0:	2b60      	cmp	r3, #96	; 0x60
 80030e2:	d877      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x168>
 80030e4:	2b50      	cmp	r3, #80	; 0x50
 80030e6:	d03c      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0xf6>
 80030e8:	2b50      	cmp	r3, #80	; 0x50
 80030ea:	d873      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x168>
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d058      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x136>
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d86f      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x168>
 80030f4:	2b30      	cmp	r3, #48	; 0x30
 80030f6:	d064      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x156>
 80030f8:	2b30      	cmp	r3, #48	; 0x30
 80030fa:	d86b      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x168>
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d060      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x156>
 8003100:	2b20      	cmp	r3, #32
 8003102:	d867      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x168>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d05c      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x156>
 8003108:	2b10      	cmp	r3, #16
 800310a:	d05a      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800310c:	e062      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6899      	ldr	r1, [r3, #8]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f000 fb1c 	bl	800375a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003130:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	609a      	str	r2, [r3, #8]
      break;
 800313a:	e04e      	b.n	80031da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6899      	ldr	r1, [r3, #8]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f000 fb05 	bl	800375a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800315e:	609a      	str	r2, [r3, #8]
      break;
 8003160:	e03b      	b.n	80031da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	461a      	mov	r2, r3
 8003170:	f000 fa7c 	bl	800366c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2150      	movs	r1, #80	; 0x50
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fad3 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 8003180:	e02b      	b.n	80031da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	461a      	mov	r2, r3
 8003190:	f000 fa9a 	bl	80036c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2160      	movs	r1, #96	; 0x60
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fac3 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 80031a0:	e01b      	b.n	80031da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f000 fa5c 	bl	800366c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fab3 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 80031c0:	e00b      	b.n	80031da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f000 faaa 	bl	8003726 <TIM_ITRx_SetConfig>
        break;
 80031d2:	e002      	b.n	80031da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031d4:	bf00      	nop
 80031d6:	e000      	b.n	80031da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	d107      	bne.n	800322e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322c:	e02a      	b.n	8003284 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2202      	movs	r2, #2
 800323c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003246:	e01d      	b.n	8003284 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	429a      	cmp	r2, r3
 8003250:	d107      	bne.n	8003262 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2204      	movs	r2, #4
 8003256:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003260:	e010      	b.n	8003284 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	d107      	bne.n	800327c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2208      	movs	r2, #8
 8003270:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800327a:	e003      	b.n	8003284 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff ffb5 	bl	80031f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a29      	ldr	r2, [pc, #164]	; (8003350 <TIM_Base_SetConfig+0xb8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a26      	ldr	r2, [pc, #152]	; (8003354 <TIM_Base_SetConfig+0xbc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a25      	ldr	r2, [pc, #148]	; (8003358 <TIM_Base_SetConfig+0xc0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <TIM_Base_SetConfig+0xb8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d007      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <TIM_Base_SetConfig+0xbc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a18      	ldr	r2, [pc, #96]	; (8003358 <TIM_Base_SetConfig+0xc0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d108      	bne.n	800330c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a07      	ldr	r2, [pc, #28]	; (8003350 <TIM_Base_SetConfig+0xb8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	615a      	str	r2, [r3, #20]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800

0800335c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0201 	bic.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f023 0302 	bic.w	r3, r3, #2
 80033a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <TIM_OC1_SetConfig+0xc8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d10c      	bne.n	80033d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0308 	bic.w	r3, r3, #8
 80033be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a13      	ldr	r2, [pc, #76]	; (8003424 <TIM_OC1_SetConfig+0xc8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d111      	bne.n	80033fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	621a      	str	r2, [r3, #32]
}
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00

08003428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0210 	bic.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0320 	bic.w	r3, r3, #32
 8003472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <TIM_OC2_SetConfig+0xd0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10d      	bne.n	80034a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800348e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <TIM_OC2_SetConfig+0xd0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d113      	bne.n	80034d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	40012c00 	.word	0x40012c00

080034fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <TIM_OC3_SetConfig+0xd0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10d      	bne.n	8003576 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a14      	ldr	r2, [pc, #80]	; (80035cc <TIM_OC3_SetConfig+0xd0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d113      	bne.n	80035a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800358c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	621a      	str	r2, [r3, #32]
}
 80035c0:	bf00      	nop
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40012c00 	.word	0x40012c00

080035d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800361a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	031b      	lsls	r3, r3, #12
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a0f      	ldr	r2, [pc, #60]	; (8003668 <TIM_OC4_SetConfig+0x98>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d109      	bne.n	8003644 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	019b      	lsls	r3, r3, #6
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	621a      	str	r2, [r3, #32]
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	40012c00 	.word	0x40012c00

0800366c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0201 	bic.w	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f023 030a 	bic.w	r3, r3, #10
 80036a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	621a      	str	r2, [r3, #32]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 0210 	bic.w	r2, r3, #16
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	031b      	lsls	r3, r3, #12
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	621a      	str	r2, [r3, #32]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	f043 0307 	orr.w	r3, r3, #7
 8003748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	609a      	str	r2, [r3, #8]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800375a:	b480      	push	{r7}
 800375c:	b087      	sub	sp, #28
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003774:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	021a      	lsls	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	431a      	orrs	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4313      	orrs	r3, r2
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	609a      	str	r2, [r3, #8]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	401a      	ands	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e046      	b.n	8003886 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a16      	ldr	r2, [pc, #88]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00e      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d009      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a12      	ldr	r2, [pc, #72]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a10      	ldr	r2, [pc, #64]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d10c      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4313      	orrs	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800

0800389c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e03d      	b.n	8003934 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e03f      	b.n	80039d0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7fd fedd 	bl	8001724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2224      	movs	r2, #36	; 0x24
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003980:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fc94 	bl	80042b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003996:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	; 0x28
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	f040 808c 	bne.w	8003b12 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_Receive+0x2e>
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e084      	b.n	8003b14 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Receive+0x40>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e07d      	b.n	8003b14 <HAL_UART_Receive+0x13c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2222      	movs	r2, #34	; 0x22
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a34:	f7fd ffc0 	bl	80019b8 <HAL_GetTick>
 8003a38:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	88fa      	ldrh	r2, [r7, #6]
 8003a44:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	d108      	bne.n	8003a62 <HAL_UART_Receive+0x8a>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e003      	b.n	8003a6a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a72:	e043      	b.n	8003afc <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2120      	movs	r1, #32
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fa43 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e042      	b.n	8003b14 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10c      	bne.n	8003aae <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e01f      	b.n	8003aee <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab6:	d007      	beq.n	8003ac8 <HAL_UART_Receive+0xf0>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_UART_Receive+0xfe>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e008      	b.n	8003ae8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3301      	adds	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1b6      	bne.n	8003a74 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d11d      	bne.n	8003b72 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_UART_Receive_IT+0x26>
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e016      	b.n	8003b74 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_UART_Receive_IT+0x38>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e00f      	b.n	8003b74 <HAL_UART_Receive_IT+0x58>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	461a      	mov	r2, r3
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fa18 	bl	8003f9e <UART_Start_Receive_IT>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	e000      	b.n	8003b74 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10d      	bne.n	8003bce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_UART_IRQHandler+0x52>
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fac9 	bl	800415e <UART_Receive_IT>
      return;
 8003bcc:	e17b      	b.n	8003ec6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80b1 	beq.w	8003d38 <HAL_UART_IRQHandler+0x1bc>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <HAL_UART_IRQHandler+0x70>
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a6 	beq.w	8003d38 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_UART_IRQHandler+0x90>
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_UART_IRQHandler+0xb0>
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f043 0202 	orr.w	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_UART_IRQHandler+0xd0>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f043 0204 	orr.w	r2, r3, #4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00f      	beq.n	8003c76 <HAL_UART_IRQHandler+0xfa>
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <HAL_UART_IRQHandler+0xee>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f043 0208 	orr.w	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 811e 	beq.w	8003ebc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <HAL_UART_IRQHandler+0x11e>
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fa62 	bl	800415e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x146>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d031      	beq.n	8003d26 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f9a4 	bl	8004010 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d023      	beq.n	8003d1e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d013      	beq.n	8003d16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	4a76      	ldr	r2, [pc, #472]	; (8003ecc <HAL_UART_IRQHandler+0x350>)
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe f88c 	bl	8001e18 <HAL_DMA_Abort_IT>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d10:	4610      	mov	r0, r2
 8003d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d14:	e00e      	b.n	8003d34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f8e3 	bl	8003ee2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	e00a      	b.n	8003d34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8df 	bl	8003ee2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e006      	b.n	8003d34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f8db 	bl	8003ee2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d32:	e0c3      	b.n	8003ebc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	bf00      	nop
    return;
 8003d36:	e0c1      	b.n	8003ebc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	f040 80a1 	bne.w	8003e84 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 809b 	beq.w	8003e84 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8095 	beq.w	8003e84 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d04e      	beq.n	8003e1c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d88:	8a3b      	ldrh	r3, [r7, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8098 	beq.w	8003ec0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d94:	8a3a      	ldrh	r2, [r7, #16]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	f080 8092 	bcs.w	8003ec0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8a3a      	ldrh	r2, [r7, #16]
 8003da0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d02b      	beq.n	8003e04 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0210 	bic.w	r2, r2, #16
 8003df8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd ffcf 	bl	8001da2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f86d 	bl	8003ef4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e1a:	e051      	b.n	8003ec0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d047      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003e34:	8a7b      	ldrh	r3, [r7, #18]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d044      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0210 	bic.w	r2, r2, #16
 8003e76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e78:	8a7b      	ldrh	r3, [r7, #18]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f839 	bl	8003ef4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e82:	e01f      	b.n	8003ec4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x324>
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f8f9 	bl	8004090 <UART_Transmit_IT>
    return;
 8003e9e:	e012      	b.n	8003ec6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x34a>
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f93a 	bl	800412e <UART_EndTransmit_IT>
    return;
 8003eba:	e004      	b.n	8003ec6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003ebc:	bf00      	nop
 8003ebe:	e002      	b.n	8003ec6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ec0:	bf00      	nop
 8003ec2:	e000      	b.n	8003ec6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ec4:	bf00      	nop
  }
}
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	08004069 	.word	0x08004069

08003ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1a:	e02c      	b.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d028      	beq.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f2a:	f7fd fd45 	bl	80019b8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d21d      	bcs.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e00f      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d0c3      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	88fa      	ldrh	r2, [r7, #6]
 8003fbc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2222      	movs	r2, #34	; 0x22
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0220 	orr.w	r2, r2, #32
 8004002:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004026:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	2b01      	cmp	r3, #1
 800403e:	d107      	bne.n	8004050 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0210 	bic.w	r2, r2, #16
 800404e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff ff2d 	bl	8003ee2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b21      	cmp	r3, #33	; 0x21
 80040a2:	d13e      	bne.n	8004122 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ac:	d114      	bne.n	80040d8 <UART_Transmit_IT+0x48>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d110      	bne.n	80040d8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	1c9a      	adds	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	621a      	str	r2, [r3, #32]
 80040d6:	e008      	b.n	80040ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	1c59      	adds	r1, r3, #1
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6211      	str	r1, [r2, #32]
 80040e2:	781a      	ldrb	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4619      	mov	r1, r3
 80040f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10f      	bne.n	800411e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800410c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800411c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004144:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff febe 	bl	8003ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b22      	cmp	r3, #34	; 0x22
 8004170:	f040 8099 	bne.w	80042a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417c:	d117      	bne.n	80041ae <UART_Receive_IT+0x50>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d113      	bne.n	80041ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419c:	b29a      	uxth	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	1c9a      	adds	r2, r3, #2
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
 80041ac:	e026      	b.n	80041fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c0:	d007      	beq.n	80041d2 <UART_Receive_IT+0x74>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <UART_Receive_IT+0x82>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	e008      	b.n	80041f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29b      	uxth	r3, r3
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4619      	mov	r1, r3
 800420a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800420c:	2b00      	cmp	r3, #0
 800420e:	d148      	bne.n	80042a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0220 	bic.w	r2, r2, #32
 800421e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800422e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	2b01      	cmp	r3, #1
 800424e:	d123      	bne.n	8004298 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0210 	bic.w	r2, r2, #16
 8004264:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b10      	cmp	r3, #16
 8004272:	d10a      	bne.n	800428a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff fe2f 	bl	8003ef4 <HAL_UARTEx_RxEventCallback>
 8004296:	e002      	b.n	800429e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fd f95b 	bl	8001554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e002      	b.n	80042a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e000      	b.n	80042a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042ea:	f023 030c 	bic.w	r3, r3, #12
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	430b      	orrs	r3, r1
 80042f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <UART_SetConfig+0x114>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d103      	bne.n	8004320 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7fe fcc6 	bl	8002ca8 <HAL_RCC_GetPCLK2Freq>
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	e002      	b.n	8004326 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004320:	f7fe fcae 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8004324:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009a      	lsls	r2, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <UART_SetConfig+0x118>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	0119      	lsls	r1, r3, #4
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	fbb2 f2f3 	udiv	r2, r2, r3
 800435c:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <UART_SetConfig+0x118>)
 800435e:	fba3 0302 	umull	r0, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2064      	movs	r0, #100	; 0x64
 8004366:	fb00 f303 	mul.w	r3, r0, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	3332      	adds	r3, #50	; 0x32
 8004370:	4a15      	ldr	r2, [pc, #84]	; (80043c8 <UART_SetConfig+0x118>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437c:	4419      	add	r1, r3
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009a      	lsls	r2, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	fbb2 f2f3 	udiv	r2, r2, r3
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <UART_SetConfig+0x118>)
 8004396:	fba3 0302 	umull	r0, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2064      	movs	r0, #100	; 0x64
 800439e:	fb00 f303 	mul.w	r3, r0, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	3332      	adds	r3, #50	; 0x32
 80043a8:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <UART_SetConfig+0x118>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	440a      	add	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40013800 	.word	0x40013800
 80043c8:	51eb851f 	.word	0x51eb851f

080043cc <calloc>:
 80043cc:	4b02      	ldr	r3, [pc, #8]	; (80043d8 <calloc+0xc>)
 80043ce:	460a      	mov	r2, r1
 80043d0:	4601      	mov	r1, r0
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	f000 b834 	b.w	8004440 <_calloc_r>
 80043d8:	2000000c 	.word	0x2000000c

080043dc <__errno>:
 80043dc:	4b01      	ldr	r3, [pc, #4]	; (80043e4 <__errno+0x8>)
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2000000c 	.word	0x2000000c

080043e8 <__libc_init_array>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	2600      	movs	r6, #0
 80043ec:	4d0c      	ldr	r5, [pc, #48]	; (8004420 <__libc_init_array+0x38>)
 80043ee:	4c0d      	ldr	r4, [pc, #52]	; (8004424 <__libc_init_array+0x3c>)
 80043f0:	1b64      	subs	r4, r4, r5
 80043f2:	10a4      	asrs	r4, r4, #2
 80043f4:	42a6      	cmp	r6, r4
 80043f6:	d109      	bne.n	800440c <__libc_init_array+0x24>
 80043f8:	f000 f8a8 	bl	800454c <_init>
 80043fc:	2600      	movs	r6, #0
 80043fe:	4d0a      	ldr	r5, [pc, #40]	; (8004428 <__libc_init_array+0x40>)
 8004400:	4c0a      	ldr	r4, [pc, #40]	; (800442c <__libc_init_array+0x44>)
 8004402:	1b64      	subs	r4, r4, r5
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	42a6      	cmp	r6, r4
 8004408:	d105      	bne.n	8004416 <__libc_init_array+0x2e>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004410:	4798      	blx	r3
 8004412:	3601      	adds	r6, #1
 8004414:	e7ee      	b.n	80043f4 <__libc_init_array+0xc>
 8004416:	f855 3b04 	ldr.w	r3, [r5], #4
 800441a:	4798      	blx	r3
 800441c:	3601      	adds	r6, #1
 800441e:	e7f2      	b.n	8004406 <__libc_init_array+0x1e>
 8004420:	0800458c 	.word	0x0800458c
 8004424:	0800458c 	.word	0x0800458c
 8004428:	0800458c 	.word	0x0800458c
 800442c:	08004590 	.word	0x08004590

08004430 <memset>:
 8004430:	4603      	mov	r3, r0
 8004432:	4402      	add	r2, r0
 8004434:	4293      	cmp	r3, r2
 8004436:	d100      	bne.n	800443a <memset+0xa>
 8004438:	4770      	bx	lr
 800443a:	f803 1b01 	strb.w	r1, [r3], #1
 800443e:	e7f9      	b.n	8004434 <memset+0x4>

08004440 <_calloc_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	fb02 f501 	mul.w	r5, r2, r1
 8004446:	4629      	mov	r1, r5
 8004448:	f000 f808 	bl	800445c <_malloc_r>
 800444c:	4604      	mov	r4, r0
 800444e:	b118      	cbz	r0, 8004458 <_calloc_r+0x18>
 8004450:	462a      	mov	r2, r5
 8004452:	2100      	movs	r1, #0
 8004454:	f7ff ffec 	bl	8004430 <memset>
 8004458:	4620      	mov	r0, r4
 800445a:	bd38      	pop	{r3, r4, r5, pc}

0800445c <_malloc_r>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	1ccd      	adds	r5, r1, #3
 8004460:	f025 0503 	bic.w	r5, r5, #3
 8004464:	3508      	adds	r5, #8
 8004466:	2d0c      	cmp	r5, #12
 8004468:	bf38      	it	cc
 800446a:	250c      	movcc	r5, #12
 800446c:	2d00      	cmp	r5, #0
 800446e:	4606      	mov	r6, r0
 8004470:	db01      	blt.n	8004476 <_malloc_r+0x1a>
 8004472:	42a9      	cmp	r1, r5
 8004474:	d903      	bls.n	800447e <_malloc_r+0x22>
 8004476:	230c      	movs	r3, #12
 8004478:	6033      	str	r3, [r6, #0]
 800447a:	2000      	movs	r0, #0
 800447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800447e:	f000 f857 	bl	8004530 <__malloc_lock>
 8004482:	4921      	ldr	r1, [pc, #132]	; (8004508 <_malloc_r+0xac>)
 8004484:	680a      	ldr	r2, [r1, #0]
 8004486:	4614      	mov	r4, r2
 8004488:	b99c      	cbnz	r4, 80044b2 <_malloc_r+0x56>
 800448a:	4f20      	ldr	r7, [pc, #128]	; (800450c <_malloc_r+0xb0>)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	b923      	cbnz	r3, 800449a <_malloc_r+0x3e>
 8004490:	4621      	mov	r1, r4
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f83c 	bl	8004510 <_sbrk_r>
 8004498:	6038      	str	r0, [r7, #0]
 800449a:	4629      	mov	r1, r5
 800449c:	4630      	mov	r0, r6
 800449e:	f000 f837 	bl	8004510 <_sbrk_r>
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	d123      	bne.n	80044ee <_malloc_r+0x92>
 80044a6:	230c      	movs	r3, #12
 80044a8:	4630      	mov	r0, r6
 80044aa:	6033      	str	r3, [r6, #0]
 80044ac:	f000 f846 	bl	800453c <__malloc_unlock>
 80044b0:	e7e3      	b.n	800447a <_malloc_r+0x1e>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	1b5b      	subs	r3, r3, r5
 80044b6:	d417      	bmi.n	80044e8 <_malloc_r+0x8c>
 80044b8:	2b0b      	cmp	r3, #11
 80044ba:	d903      	bls.n	80044c4 <_malloc_r+0x68>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	441c      	add	r4, r3
 80044c0:	6025      	str	r5, [r4, #0]
 80044c2:	e004      	b.n	80044ce <_malloc_r+0x72>
 80044c4:	6863      	ldr	r3, [r4, #4]
 80044c6:	42a2      	cmp	r2, r4
 80044c8:	bf0c      	ite	eq
 80044ca:	600b      	streq	r3, [r1, #0]
 80044cc:	6053      	strne	r3, [r2, #4]
 80044ce:	4630      	mov	r0, r6
 80044d0:	f000 f834 	bl	800453c <__malloc_unlock>
 80044d4:	f104 000b 	add.w	r0, r4, #11
 80044d8:	1d23      	adds	r3, r4, #4
 80044da:	f020 0007 	bic.w	r0, r0, #7
 80044de:	1ac2      	subs	r2, r0, r3
 80044e0:	d0cc      	beq.n	800447c <_malloc_r+0x20>
 80044e2:	1a1b      	subs	r3, r3, r0
 80044e4:	50a3      	str	r3, [r4, r2]
 80044e6:	e7c9      	b.n	800447c <_malloc_r+0x20>
 80044e8:	4622      	mov	r2, r4
 80044ea:	6864      	ldr	r4, [r4, #4]
 80044ec:	e7cc      	b.n	8004488 <_malloc_r+0x2c>
 80044ee:	1cc4      	adds	r4, r0, #3
 80044f0:	f024 0403 	bic.w	r4, r4, #3
 80044f4:	42a0      	cmp	r0, r4
 80044f6:	d0e3      	beq.n	80044c0 <_malloc_r+0x64>
 80044f8:	1a21      	subs	r1, r4, r0
 80044fa:	4630      	mov	r0, r6
 80044fc:	f000 f808 	bl	8004510 <_sbrk_r>
 8004500:	3001      	adds	r0, #1
 8004502:	d1dd      	bne.n	80044c0 <_malloc_r+0x64>
 8004504:	e7cf      	b.n	80044a6 <_malloc_r+0x4a>
 8004506:	bf00      	nop
 8004508:	20000124 	.word	0x20000124
 800450c:	20000128 	.word	0x20000128

08004510 <_sbrk_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	2300      	movs	r3, #0
 8004514:	4d05      	ldr	r5, [pc, #20]	; (800452c <_sbrk_r+0x1c>)
 8004516:	4604      	mov	r4, r0
 8004518:	4608      	mov	r0, r1
 800451a:	602b      	str	r3, [r5, #0]
 800451c:	f7fd f992 	bl	8001844 <_sbrk>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d102      	bne.n	800452a <_sbrk_r+0x1a>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	b103      	cbz	r3, 800452a <_sbrk_r+0x1a>
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	2000024c 	.word	0x2000024c

08004530 <__malloc_lock>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__malloc_lock+0x8>)
 8004532:	f000 b809 	b.w	8004548 <__retarget_lock_acquire_recursive>
 8004536:	bf00      	nop
 8004538:	20000254 	.word	0x20000254

0800453c <__malloc_unlock>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__malloc_unlock+0x8>)
 800453e:	f000 b804 	b.w	800454a <__retarget_lock_release_recursive>
 8004542:	bf00      	nop
 8004544:	20000254 	.word	0x20000254

08004548 <__retarget_lock_acquire_recursive>:
 8004548:	4770      	bx	lr

0800454a <__retarget_lock_release_recursive>:
 800454a:	4770      	bx	lr

0800454c <_init>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr

08004558 <_fini>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr
